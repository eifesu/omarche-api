datasource db {
  provider = "sqlite"
  url      = "file:./sqlite/dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  userId   String @id @default(uuid())
  email    String @unique
  password String

  firstName String
  lastName  String
  birthDate DateTime
  gender    String
  phone     String

  city   String
  street String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders     Order[]
  reviews    Review[]
  promoCodes PromoCode[]

  card Card?

  @@map("users")
}

model Agent {
  agentId  String @id @default(uuid())
  email    String @unique
  password String

  firstName String
  lastName  String
  birthDate DateTime
  gender    String
  phone     String

  marketId String?
  market   Market? @relation(fields: [marketId], references: [marketId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("agents")
}

model Market {
  marketId String @id @default(uuid())
  name     String

  geolocation String
  photoUrl    String?

  agents Agent[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellers Seller[]

  @@map("markets")
}

model Card {
  cardId String @id @default(uuid())

  cardNumber     String
  expirationDate String

  userId String @unique
  user   User   @relation(fields: [userId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cards")
}

model Seller {
  sellerId String @id @default(uuid())
  email    String @unique
  password String

  firstName String
  lastName  String
  birthDate String

  description String
  gender      String
  tableNo     String
  status      Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  marketId String
  market   Market @relation(fields: [marketId], references: [marketId])

  products Product[]

  @@map("sellers")
}

model Shipper {
  shipperId String @id @default(uuid())
  email     String @unique
  password  String

  firstName String
  lastName  String
  birthDate String
  phone     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("shippers")
}

model Product {
  productId String @id @default(uuid())
  name      String

  price Float
  unit  String?
  batch Float

  photoUrl    String
  category    String
  description String
  inStock     Boolean @default(true)

  sellerId String
  seller   Seller @relation(fields: [sellerId], references: [sellerId])

  lines   Line[]
  reviews Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("products")
}

model Order {
  orderId String @id @default(uuid())

  status      String @default("pending")
  geolocation String
  address     String

  shippingFee   Float
  paymentMethod String

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  toBeDeliveredOn DateTime?

  lines Line[]

  shipperId String?
  shipper   Shipper? @relation(fields: [shipperId], references: [shipperId])

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  agentId String?
  agent   Agent?  @relation(fields: [agentId], references: [agentId])

  promoCodeId String?
  promoCode   PromoCode? @relation(fields: [promoCodeId], references: [promoCodeId])

  @@map("orders")
}

model Review {
  reviewId String @id @default(uuid())

  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  userId String
  user   User   @relation(fields: [userId], references: [userId])

  @@map("reviews")
}

model Line {
  lineId String @id @default(uuid())

  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [productId])

  orderId String
  order   Order  @relation(fields: [orderId], references: [orderId])

  @@map("lines")
}

model PromoCode {
  promoCodeId String @id @default(uuid())

  code           String @unique
  description    String
  discountType   String
  discountAmount Float

  expiresOn DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users  User[]
  Orders Order[]

  @@map("promo_codes")
}
